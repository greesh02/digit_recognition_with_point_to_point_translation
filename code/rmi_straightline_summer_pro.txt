#define PI 3.1415926535897932384626433832795 
#include <QMC5883L.h>
#include <Wire.h>

QMC5883L compass;

volatile int c_L = 0,c_R = 0;
volatile int enco_L = 2,enco_R = 3;   //encoder input pins

int N = 40;
float diameter = 6; //diameter in cm
float longitude = 14.6; // L dist between 2 wheels

int sample = 10;

float dist_L = 0;
int Ltick = 0;
int Ltick_prev = 0;
int delta_Ltick = 0;

float dist_R = 0;
int Rtick = 0;
int Rtick_prev = 0;
int delta_Rtick = 0;
//------------------------------------------------------------------------------------------

float v_lin = 0;           //required velocity
//--------------------------------------------------------------------------
float error_s = 0;                                        // error 
float Kp_s = 2.0;                                          //proportion control                                
int PWM_r = 0;                                           // PWM value to set
int PWM_l = 0; 
//============================================================================================

//--------------------------------------------------------------------------------------------
volatile unsigned delta_t_l = 0;
volatile unsigned curr_t_l = 0;
volatile unsigned prev_t_l = 0;

//-------------------------------------------------------------------------------------------
volatile unsigned delta_t_r = 0;
volatile unsigned curr_t_r = 0;
volatile unsigned prev_t_r = 0;
//--------------------------------------------------------------------------------------------
float dist_c = 0 ;  //distance moved by the central point
float phi = 0;     //initial angular position
float phid = 0;     //destination angular position
//------------------------------------------------------------------------------------------
//motor pins
volatile int right_1 = 7 ,right_2 = 8;
volatile int left_3 = 12 ,left_4 = 13;


//motor PWM pins
int right_pwm = 6 , left_pwm = 5;

int not1;
void setup() {
  
  Serial.begin(9600);

     //right motor
pinMode(right_1,OUTPUT);
pinMode(right_2,OUTPUT);
pinMode(right_pwm,OUTPUT);

 //left motor
pinMode(left_3,OUTPUT);
pinMode(left_4,OUTPUT);
pinMode(left_pwm,OUTPUT);

  pinMode(enco_L,INPUT); //Left
  pinMode(enco_R,INPUT); //Right
  
 
  attachInterrupt(digitalPinToInterrupt(enco_L),count_L,CHANGE);
  attachInterrupt(digitalPinToInterrupt(enco_R),count_R,CHANGE);

  
  Wire.begin();

  compass.init();
  compass.setSamplingRate(50);
  calibrate();        // calibration of compass-------------------------------------------------------

  delay(1000);
  while(Serial.available() == 0)
  {  
  }
  phid = Serial.parseInt();
  Ltick = 0;
  Rtick = 0;
}
void calibrate(){

  while(Serial.available() == 0){

    int heading = compass.readHeading();
   
   heading -=74;
  if((-74 <= heading ) && (heading <= 0)){
       heading += 360;
       
  }
    Serial.print("heading : ");
    Serial.println(heading);

  
  }
  not1 = Serial.parseInt();
}

void count_L()
{

  



      Ltick++;

  
  //Serial.print("L : ");
  //Serial.println( c_L);
  


}

void count_R()
{

  

      Rtick++;
       
   Serial.println(" ");
   Serial.print("R : ");
   Serial.println( Rtick);
  

}
void loop() 
{           
  
  

  delay(10);   // sampling 
    
   int heading = compass.readHeading();
   
   heading -=74;
  if((-74 <= heading ) && (heading <= 0)){
       heading += 360;
       
  }
 

  if((0 <= phid) && (phid >= 180)&&((heading == 0) || (heading == 360))){
    heading = 0; 
  }
  if((180 < phid) && (phid >= 360)&&((heading == 0) || (heading == 360))){
    heading = 360;
 }
  phi = heading;
  Serial.print("heading : ");
   Serial.println(phi); 

   

    
//error calculation------------------------------------------------------------------------------------------------------
    if(((0 <= phid) && (phid <=90)) && ((270 <= phi) && (phi < 360))){
      error_s = 0 - phid -(360 - phi);
    }
    else if(((270 <= phid )&& (phid <= 360)) && ((0 < phi) && (phi < 90))){
      error_s = 360 + phi - phid;
    }
    else{  
    error_s = phi - phid;
    }
   
    v_lin = 100;                        //constant velocity --- req PWM
    
    PWM_r = v_lin + (Kp_s*error_s);
    PWM_l = v_lin - (Kp_s*error_s);       /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    PWM_l = constrain(PWM_l,50,150);
    PWM_r = constrain(PWM_r,50,150);

   Serial.print("error : ");
   Serial.println(error_s); 
    Serial.print("correction : ");
   Serial.println(error_s*Kp_s); 
   odometry();
   digitalWrite(right_1,HIGH);
   digitalWrite(right_2,LOW);  //RIGHT MOTOR FORWARD

   digitalWrite(left_3,HIGH);
   digitalWrite(left_4,LOW);   //LEFT MOTOR FORWARD

   Serial.print(PWM_l); // to plot in serial plotter
   Serial.print(' ');
   Serial.println(PWM_r); // to plot in serial plotter

   


}
void odometry(){

   delta_Ltick = Ltick - Ltick_prev;
   dist_L = PI*diameter*(delta_Ltick/(double) N);

   delta_Rtick = Rtick - Rtick_prev;
   dist_R = PI*diameter*(delta_Rtick/(double) N);

   dist_c += (dist_L + dist_R)/2;
   
   Serial.print("dist_c : ");
   Serial.println(dist_c);


   Ltick_prev = Ltick;
   Rtick_prev = Rtick;
   
 
}